# -*- coding: utf-8 -*-
"""MovieRecommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Qjok4zlK38Yp0_zCngijdmzvFIuQni3
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

movies = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/movie_dataset.csv')
movies.head()

movies = movies[['id', 'title', 'genres', 'keywords', 'overview', 'cast', 'crew']]

movies.head()

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

movies['genres'] = movies['genres'].str.replace('Science Fiction', 'Science_Fiction')

movies['genres']

def convert(stringWithSpace):
  listWithoutSpace = stringWithSpace.split()
  return listWithoutSpace

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies.head()

movies['crew'][10]

import ast

def fetch_director(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head()

movies['cast']

def convert1(stringWithSpace):
  stringWithoutSpace = stringWithSpace.split()
  fullNames = []
  for i in range (len(stringWithoutSpace)):
    if i%2!=0:
      fullNames.append(stringWithoutSpace[i-1]+" "+stringWithoutSpace[i])
  return fullNames

movies['cast'] = movies['cast'].apply(convert1)

movies['cast']

movies.head()

movies['overview'][0]

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies.head()

movies['genres'] = movies['genres'].apply(lambda x:[i.replace("_","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

new_df = movies[['id','title','tags']]

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())

import nltk

from nltk.stem.porter import PorterStemmer 
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)

new_df.head()

from sklearn.feature_extraction.text import CountVectorizer 
cv = CountVectorizer(max_features=5000,stop_words='english')

vectors = cv.fit_transform(new_df['tags']).toarray()

vectors[0]

cv.get_feature_names()

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)

sorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])[1:6]

def recommend(movie):
  movie_index = new_df[new_df['title'] == movie].index[0]
  distances = similarity[movie_index] 
  movies_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('The Dark Knight')

recommend('Avatar')

recommend('Star Trek Beyond')

